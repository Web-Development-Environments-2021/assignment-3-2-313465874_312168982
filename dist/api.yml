openapi: 3.0.0
# servers: #delete
#   # Added by API Auto Mocking Plugin
#   - description: SwaggerHub API Auto Mocking
#     url: https://virtserver.swaggerhub.com/noya21/footballSystem/1.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: Simple Inventory API
  # contact:
  #   email: you@your-company.com
  # license:
  #   name: Apache 2.0
  #   url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: auth
    description: register, login and logout functionality
  - name: users
    description: fd
  - name: AllUsers
    description: functionality all users can do
  - name: ConnectedUser
    description: functionality only connected users can do

    
paths:
  /auth/Register:
    post:
      tags:
        - User
      summary: A new user from the client is added
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: A new user has been added
        '409': 
          description: Wrong input parameters
  
  /auth/Login:
    post:
      tags:
        - User
      summary: A user from the client is signed in
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: A new user has been found
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        '401':
          description: Wrong input parameters
  
  /auth/Logout:
    post:
      tags:
        - User
      summary: A user from the client is signed out
      responses:
        default:
          description: successful logout
          
  /AllUsers/getDetails:
    get:
      tags:
        - AllUsers
      summary: relevant info for current time
      responses:
        '200':
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/leagueDetails'
          description: success
        '400':
          description: Wrong input parameters
      
  /ConnectedUser/getFavoriteGames:
    get:
      tags:
        - ConnectedUser
      summary: user gets his favorite games
      security:
        - cookieAuth: []
      responses:
        '200':
          description: favorite games
          content: 
            application/json:
              schema:
                type: array
                items: 
                  anyOf:
                    - $ref: '#/components/schemas/PlayerPreview'
                    - $ref: '#/components/schemas/Game'
                    - $ref: '#/components/schemas/TeamPreview'
        '403':
          description: The game already pass
        '404':
          description: No available games
      
  /AllUsers/search:
    get:
      tags:
        - AllUsers
      summary: search games, players and teams
      parameters:
        - in: query
          name: query 
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: success
          content: 
            application/json:
              schema:
                type: array
                items: 
                  anyOf:
                    - $ref: '#/components/schemas/PlayerPreview'
                    # - $ref: '#/components/schemas/CoachPreview'
                    - $ref: '#/components/schemas/TeamPreview'
        '404':
          description: No available results 
  
  /AllUsers/playersPreviewDetails/{user_id}:
    get:
      tags:
        - AllUsers
      summary: get player info
      parameters:
        - in: path
          name: user_id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: success
          content: 
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/PlayerPreview'
        '404':
          description: No results available
     
  /AllUsers/playersFullDetails/{users_id}:
    get:
      tags:
        - AllUsers
      summary: get player info
      parameters:
        - in: path
          name: users_id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: success
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/PlayerTicket'
                    - $ref: '#/components/schemas/PlayerPreview'
        '404':
          description: No results available
          
  # /AllUsers/coachDetails/{fullName}:
  #   get:
  #     tags:
  #       - AllUsers
  #     summary: get coach info
  #     parameters:
  #       - in: path
  #         name: fullName
  #         required: true
  #         schema: 
  #           type: string
  #     responses:
  #       '200':
  #         description: success
  #         content: 
  #           application/json:
  #             schema:
  #               type: object
  #               allOf:
  #                 - $ref: '#/components/schemas/CoachTicket'
  #                 - $ref: '#/components/schemas/CoachPreview'
  #       '404':
  #         description: No results available
    
  /ConnectedUser/checkLike/{fullName}:
    get:
      tags:
        - ConnectedUser
      summary: check if item is liked
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: fullName
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: success
          content: 
            application/json:
              schema:
                type: boolean
        '404':
          description: you should be connected
          
  /ConnectedUser/addFavoriteGame:
    post:
      tags:
        - ConnectedUser
      summary: add like to game
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: success
        '401':
          description: you should be connected
        '409':
          description: you already like it
  
  
  /ConnectedUser/addGame:
    post:
      tags:
        - ConnectedUser
      summary: add game to DB
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: success
        '401':
          description: you should be connected
        '403':
          description: you are not allowed to do this activity
  
  /ConnectedUser/addResultGame:
    post:
      tags:
        - ConnectedUser
      summary: add result to game
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: success
        '401':
          description: you should be connected
        '403':
          description: you are not allowed to do this activity
  
  
  /ConnectedUser/addMatchReportToGame:
    post:
      tags:
        - ConnectedUser
      summary: add match report to game
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: success
        '401':
          description: you should be connected
        '403':
          description: you are not allowed to do this activity
  
  
  /AllUsers/getGamesDB:
    get:
      tags:
        - AllUsers
      summary: get games from DB
      responses:
        '200':
          description: games from DB
          content: 
            application/json:
              schema:
                type: array
                items: 
                  anyOf:
                    - $ref: '#/components/schemas/Game'
        '404':
          description: No available games
  
  /AllUsers/teamFullDetails/{team_name}:
    get:
      tags:
        - AllUsers
      summary: get team info
      parameters:
        - in: path
          name: team_name
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: success
          content: 
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/TeamPage'
                  - $ref: '#/components/schemas/TeamPreview'
        '404':
          description: No results available
          
  /AllUsers/matchReportGame/game_id/{game_id}:
    get:
      tags:
        - AllUsers
      summary: get team info
      parameters:
        - in: path
          name: game_id
          required: true
          schema: 
            type: integer
      responses:
        '200':
          description: success
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/matchReport'
        '404':
          description: No results available
  
components:
  schemas:
    User:
      type: object
      description: User register
      properties:
        userID:
          type: integer
          description: user's id
          example: "3"
        username:
          type: string
          pattern: /[A-Za-z]/ #no numbers
          minLength: 3
          maxLength: 8
          description: user's username 
          example: "NoyaLev"
        firstName:
          type: string
          description: user's first name
          example: "Noya"
        lastName:
          type: string
          description: user's last name
          example: "Lev"
        country:
          type: string
          description: user's country
          example: "Israel"
        password:
          type: string
          description: password should contains between 5 to 10 characters, at least one of them is a number and a special char
          minLength: 5
          maxLength: 10
          format: password
          pattern:  /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/
          example: "2y4$gd89"
        email:
          type: string
          format: email
          pattern:  /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
          description: user's email
          example: "user123@gmail.com"
        image-url:
          type: string
          format: URL
          description: URL for user's image 
          example: "https://cloudinary.com/danilevy"
          
    UserLogin:
      type: object
      description: User login
      properties:
        username:
          type: string #no numbers
          # minLength: 3 
          # maxLength: 8 
          description: user's username 
          example: "NoyaLev"
        password: 
          type: string
          description: password
          format: password
          example: "df576!@dfg56"
          
    leagueDetails:
      type: object
      description: relevant info for current time (left col)
      properties:
        leagueName:
          type: string
          description: league's name
          example: "la liga"
        seasonName:
          type: string
          description: season's name
          example: "2015-2016"
        stageName:
          type: string
          description: stage's name
          example: "2"
        gameDetails:
          $ref: '#/components/schemas/Game' 
          
    PlayerPreview:
      type: object
      description: player info
      properties:
        fullName:
          type: string
          description: player's name
          example: "Ronald"
        teamName:
          type: string
          description: his active team's name 
          example: "Barcelona"
        image-url:
          type: string
          format: URL
          description: URL for player's image 
          example: "https://cloudinary.com/danilevy"
        position_id:
            type: integer
            description: player's position number
            example: 4
    
    # CoachPreview:
    #   type: object
    #   description: coach info
    #   properties:
    #     fullName:
    #       type: string
    #       description: coach's name
    #       example: "Reuven"
    #     teamName:
    #       type: string
    #       description: his active team's name 
    #       example: "Spain"
    #     image-url:
    #       type: string
    #       format: URL
    #       description: URL for player or coach's image 
    #       example: "https://cloudinary.com/danilevy"
          
    PlayerTicket:
      type: object
      description: player ticket info
      properties:
        commonName:
          type: string
          description: player's common name
          example: "Mess"
        nation:
          type: string
          description: player nation
          example: "Jewish"
        birthDate:
          type: string
          description: player birth date
          format: date
          example: "1990-01-01"
        CountryBirth:
          type: string
          description: player birth country
          example: "Spain"
        height:
          type: number
          description: player height
          example: 1.86
        weight: #optional
          type: number
          description: player weight
          example: 84
          
    # CoachTicket:
    #   type: object
    #   description: coach ticket info
    #   properties:
    #     commonName:
    #       type: string
    #       description: coach's common name
    #       example: "Ron"
    #     nation:
    #       type: string
    #       description: coach nation
    #       example: "Arab"
    #     birthDate:
    #       type: string
    #       description: coach birth date
    #       format: date
    #       example: "1990-01-01"
    
    TeamPreview:
      type: object
      description: team preview
      properties:
        name:
          type: string
          description: team name
          example: "spy"
        logo:
          type: string
          format: URL
          description: URL for team's logo 
          example: "https://cloudinary.com/team"
          
    TeamPage:
      type: object 
      description: team info
      properties: #can add more
        players:
          type: array
          items: 
              $ref: '#/components/schemas/PlayerPreview'
          description: team players info
          example: [X,Y]
        # coach:
        #   type: object
        #   allOf:
        #     - $ref: '#/components/schemas/CoachPreview'
        #   description: team's coach
        #   example: Pep
        games:
          type: array
          items: 
            $ref: '#/components/schemas/Game'
          description: team's games
          example: [X,Z]
    
    Game:
      type: object
      description: game info
      properties:
        game_id:
          type: integer
          description: game id
          example: '2'
        date_time: 
          type: string
          description: date time game
          format: date-time
          example: 2016-05-21 13:20
        homeTeam:
          type: string
          description: home team info
          example: "FC Barcelona"
        awayTeam:
          type: string
          description: away team info
          example: "AC Rome"
        stadium:
          type: string
          description: statium field
          example: "Camp nou"
        result:
          type: string
          description: result game
          example: "2-1" 
  
    matchReport:
      type: object
      description: match report
      properties:
        game_id:
          type: integer
          description: game id
          example: 4
        # dateTime:
        #   type: string
        #   format: date-time
        #   description: date time event
        #   example: "2016-05-21 13:20"
        minuteEvent:
          type: integer
          description: time event happened
          example: 43
        descriptionEvent:
          $ref: '#/components/schemas/GameEvent'
          
    
    GameEvent:
      type: string
      enum: 
        - goal
        - offside
        - foul
        - Red Card
        - Yellow card
        - injury
        - Substitution

    
  securitySchemes:
    cookieAuth:  
      type: apiKey
      in: cookie
      name: session  # cookie name


# openapi: 3.0.0
# info:
#   title: api
#   description: API for  project
#   version: 1.0.0
# tags:
#   - name: Users
#   - name: Auth
#   - name: League
#   - name: Players
#   - name: Teams
#   - name: Games
# paths:
#   /Register:
#     post:
#       tags:
#         - Auth
#       summary: Add new user
#       description: A new user from the client is added to the server
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/User"
#       responses:
#         "201":
#           description: A new user has been added
#         "400":
#           description: wrong input parameters
#   /Login:
#     post:
#       tags:
#         - Auth
#       summary: Login an exist user
#       description: An exist user login to the system
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/LoginScheme"
#       responses:
#         "200":
#           description: >
#             User was found in the DB and authenitcated successfully.
#             The session ID is returned in a cookie named `session`. 
#             You should include this cookie in subsequent requests
#           # headers:
#           #   Set-Cookie:
#           #     schema:
#           #       type: string
#           #       example: session=87s97sdhgf279293f8w0e9
#             # Note that the Set-Cookie header and securitySchemes are not connected in any way, and the Set-Header definition is for documentation purposes only.
#         "401":
#           description: Authentication failed
#   /logout:
#     post:
#       tags:
#         - Auth
#       summary: logout a user from the system and delete his cookie
#       responses:
#         "200":
#           description: "the user has ben successfully logged out"
#   /league/getDetails:
#     get:
#       tags:
#         - league
#       summary: Return the details about the current league
#       responses:
#         "200":
#           description: data about the current league returned
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: "#/components/schemas/League"
#         "400":
#           description: wrong input parameters
#   /users/favoritePlayers:
#     get:
#       tags:
#         - Users
#         - Players
#       summary: Return the favorite players that were saved by user
#       parameters:
#       responses:
#         "200":
#           description: data about the user's favorites players returned
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: "#/components/schemas/PlayerPreview"
#         "401":
#           description: user is not authorized
#     post:
#       summary: save player in the favorites list of a user
#       tags:
#         - Users
#         - Players
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 playerId:
#                   type: string
#                   description: player's id which the user saved
#                   example: 85
#       responses:
#         "201":
#           description: The player successfully saved as favorite
#         "401":
#           description: user is not authorized
#   /teams/teamFullDetails/{teamId}:
#     get:
#       summary: get full deatils about a team
#       description: useful for team page
#       tags:
#         - Teams
#       parameters:
#         - in: path
#           name: teamId
#           description: team's id
#           required: true
#           schema:
#             type: integer
#       responses:
#         "200":
#           description: data about the team
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Team"
#         "404":
#           description: teamId is not exists
# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         username:
#           maxLength: 8
#           minLength: 3
#           type: string
#           description: username conatins between 3 to 8 letters only
#           example: ladygaga
#         firstname:
#           type: string
#           description: user's first name
#           example: Stefani
#         lastname:
#           type: string
#           description: user's last name
#           example: Germanotta
#         country:
#           type: string
#           description: user's country
#           example: USA
#         password:
#           maxLength: 10
#           minLength: 5
#           type: string
#           description:
#             password conatins between 5 to 10 chars, at least one of them
#             is a number and a special char
#           format: password
#           example: lady@56
#         email:
#           pattern: email
#           type: string
#           description: user's email
#           example: ladygaga@gmail.com
#         image-url:
#           pattern: URL
#           type: string
#           description: URL for the user's image
#           example: https://cloudinary.com/
#       description: Model containing user info
#     LoginScheme:
#       type: object
#       properties:
#         username:
#           type: string
#           minLength: 3
#           maxLength: 8
#           description: username conatins letters only
#           example: naorbe
#         password:
#           type: string
#           minLength: 5
#           maxLength: 10
#           format: password
#           description: password conatins at least one number and one special char
#           example: naor@55
#     League:
#       type: object
#       properties:
#         league_name:
#           type: string
#           description: league name
#           example: Superliga
#         current_season_name:
#           type: string
#           description: current season name
#           example: "2020/2021"
#         current_stage_name:
#           type: string
#           description: current stage name
#           example: Championship Round
#     PlayerPreview:
#       type: object
#       properties:
#         name:
#           type: string
#           description: player's name
#           example: Sten Michael Grytebust
#         image:
#           type: string
#           description: player's image
#           format: URL
#           example: https://cdn.sportmonks.com/images/soccer/players/11/84587.png
#         position:
#           type: integer
#           description: player's position in team
#           example: 1
#         team_name:
#           type: string
#           description: player's team name
#           example: København
#     Team:
#       type: object
#       properties:
#         name:
#           type: string
#           description: team name
#           example: København
#         players:
#           type: array
#           items:
#             type: object
#             $ref: "#/components/schemas/PlayerPreview"
